{"ast":null,"code":"var _jsxFileName = \"/home/avinesh/Documents/gith/port1/src/App.js\";\nimport './App.css';\nimport Header from './Components/Header/Header';\nimport SecondPart from './Components/SecondPart/SecondPart';\nimport { ApolloClient, InMemoryCache, createHttpLink, ApolloProvider } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\"; //creating the http link (from graphql the link remains same doesnot change according to the endpoints like rest)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = createHttpLink({\n  uri: \"https://api.github.com/graphql\"\n}); //creating the authlink for authorisation\n\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token'); // return the headers to the context so httpLink can read them\n\n  return {\n    headers: { ...headers,\n      authorization: `Bearer ${process.env.GITHUB}`\n    }\n  };\n}); //creating the instance of the apolloclient \n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SecondPart, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"third\",\n        children: \"hhhhh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/avinesh/Documents/gith/port1/src/App.js"],"names":["Header","SecondPart","ApolloClient","InMemoryCache","createHttpLink","ApolloProvider","setContext","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","process","env","GITHUB","client","link","concat","cache","App"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,MAAP,MAAmB,4BAAnB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;AACA,SACEC,YADF,EAEEC,aAFF,EAGEC,cAHF,EAIEC,cAJF,QAKO,gBALP;AAMA,SAAQC,UAAR,QAAyB,6BAAzB,C,CAEA;;;AACA,MAAMC,QAAQ,GAAGH,cAAc,CAAC;AAC9BI,EAAAA,GAAG,EAAE;AADyB,CAAD,CAA/B,C,CAIA;;AACA,MAAMC,QAAQ,GAAGH,UAAU,CAAC,CAACI,CAAD,EAAI;AAAEC,EAAAA;AAAF,CAAJ,KAAoB;AAC9C;AACA,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CAF8C,CAG9C;;AACA,SAAO;AACLH,IAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPI,MAAAA,aAAa,EAAG,UAASC,OAAO,CAACC,GAAR,CAAYC,MAAO;AAFrC;AADJ,GAAP;AAMD,CAV0B,CAA3B,C,CAYA;;AACA,MAAMC,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC9BkB,EAAAA,IAAI,EAAEX,QAAQ,CAACY,MAAT,CAAgBd,QAAhB,CADwB;AAE9Be,EAAAA,KAAK,EAAE,IAAInB,aAAJ;AAFuB,CAAjB,CAAf;;AAKA,SAASoB,GAAT,GAAe;AACb,sBACE,QAAC,cAAD;AAAgB,IAAA,MAAM,EAAEJ,MAAxB;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,QAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;KAVQI,G;AAYT,eAAeA,GAAf","sourcesContent":["import './App.css';\nimport Header from './Components/Header/Header';\nimport SecondPart from './Components/SecondPart/SecondPart';\nimport { \n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n  ApolloProvider,\n} from \"@apollo/client\";\nimport {setContext} from \"@apollo/client/link/context\"\n\n//creating the http link (from graphql the link remains same doesnot change according to the endpoints like rest)\nconst httpLink = createHttpLink({\n  uri: \"https://api.github.com/graphql\",\n});\n\n//creating the authlink for authorisation\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: `Bearer ${process.env.GITHUB}`,\n    }\n  }\n});\n\n//creating the instance of the apolloclient \nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">  \n        <Header />\n        <SecondPart />\n        <div className=\"third\">hhhhh</div>\n    </div>  \n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}