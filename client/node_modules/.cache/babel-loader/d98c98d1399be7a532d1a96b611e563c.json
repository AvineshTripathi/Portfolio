{"ast":null,"code":"import { ApolloClient, createHttpLink, InMemoryCache, gql } from \"@apollo/client\";\nimport { setContext } from '@apollo/client/link/context';\nexport async function getStaticProps() {\n  const httpLink = createHttpLink({\n    uri: 'https://api.github.com/graphql'\n  });\n  const authLink = setContext((_, {\n    headers\n  }) => {\n    return {\n      headers: { ...headers,\n        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`\n      }\n    };\n  });\n  const client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache: new InMemoryCache()\n  });\n  const {\n    data\n  } = await client.query({\n    query: gql`\n          {\n            user(login: \"AvineshTripathi\") {\n              pinnedItems(first: 1) {\n                totalCount\n                edges {\n                  node {\n                    ... on Repository {\n                      name\n                      id\n                      url\n                      stargazers {\n                        totalCount\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `\n  });\n  const {\n    user\n  } = data;\n  const pinnedItems = user.pinnedItems.edges.map(edge => edge.node);\n  return {\n    props: {}\n  };\n}","map":{"version":3,"sources":["/home/avinesh/Documents/gith/port1/src/github.js"],"names":["ApolloClient","createHttpLink","InMemoryCache","gql","setContext","getStaticProps","httpLink","uri","authLink","_","headers","authorization","process","env","GITHUB_ACCESS_TOKEN","client","link","concat","cache","data","query","user","pinnedItems","edges","map","edge","node","props"],"mappings":"AAAA,SAASA,YAAT,EAAuBC,cAAvB,EAAuCC,aAAvC,EAAsDC,GAAtD,QAAiE,gBAAjE;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,QAAQ,GAAGL,cAAc,CAAC;AAC5BM,IAAAA,GAAG,EAAE;AADuB,GAAD,CAA/B;AAIE,QAAMC,QAAQ,GAAGJ,UAAU,CAAC,CAACK,CAAD,EAAI;AAAEC,IAAAA;AAAF,GAAJ,KAAoB;AAC9C,WAAO;AACLA,MAAAA,OAAO,EAAE,EACP,GAAGA,OADI;AAEPC,QAAAA,aAAa,EAAG,UAASC,OAAO,CAACC,GAAR,CAAYC,mBAAoB;AAFlD;AADJ,KAAP;AAMD,GAP0B,CAA3B;AASA,QAAMC,MAAM,GAAG,IAAIf,YAAJ,CAAiB;AAC9BgB,IAAAA,IAAI,EAAER,QAAQ,CAACS,MAAT,CAAgBX,QAAhB,CADwB;AAE9BY,IAAAA,KAAK,EAAE,IAAIhB,aAAJ;AAFuB,GAAjB,CAAf;AAKA,QAAM;AAAEiB,IAAAA;AAAF,MAAW,MAAMJ,MAAM,CAACK,KAAP,CAAa;AAClCA,IAAAA,KAAK,EAAEjB,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArB0C,GAAb,CAAvB;AAwBA,QAAM;AAAEkB,IAAAA;AAAF,MAAWF,IAAjB;AACA,QAAMG,WAAW,GAAGD,IAAI,CAACC,WAAL,CAAiBC,KAAjB,CAAuBC,GAAvB,CAA2BC,IAAI,IAAIA,IAAI,CAACC,IAAxC,CAApB;AAEF,SAAO;AACLC,IAAAA,KAAK,EAAE;AADF,GAAP;AAKD","sourcesContent":["import { ApolloClient, createHttpLink, InMemoryCache, gql } from \"@apollo/client\";\nimport { setContext } from '@apollo/client/link/context';\n\nexport async function getStaticProps() {\n    const httpLink = createHttpLink({\n        uri: 'https://api.github.com/graphql',\n      });\n      \n      const authLink = setContext((_, { headers }) => {\n        return {\n          headers: {\n            ...headers,\n            authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,\n          }\n        }\n      });\n      \n      const client = new ApolloClient({\n        link: authLink.concat(httpLink),\n        cache: new InMemoryCache()\n      });\n\n      const { data } = await client.query({\n        query: gql`\n          {\n            user(login: \"AvineshTripathi\") {\n              pinnedItems(first: 1) {\n                totalCount\n                edges {\n                  node {\n                    ... on Repository {\n                      name\n                      id\n                      url\n                      stargazers {\n                        totalCount\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        `\n      });\n      \n      const { user } = data;\n      const pinnedItems = user.pinnedItems.edges.map(edge => edge.node);\n     \n    return {\n      props: {\n        \n      }\n    }\n  }"]},"metadata":{},"sourceType":"module"}